#!/usr/bin/env ruby
#
#  Created on 2008-9-4.
#  Copyright (c) 2008. All rights reserved.

begin
  require 'rubygems'
rescue LoadError
  # no rubygems to load, so we fail silently
end

require 'optparse'
require 'subtitle_it'

include SubtitleIt
# NOTE: the option -p/--path= is given as an example, and should probably be replaced in your application.

OPTIONS = {
 # :path     => '~',
  :format   => nil,
  :delay    => nil
}
MANDATORY_OPTIONS = %w(  )

parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
SubtitleIt - Convert and create subtitles.

Usage: #{File.basename($0)} [options] file_in [file_out]

Options are:
  -c FORMAT --convert=FORMAT  Format to convert to: yml, srt or sub.
       
  -d DELAY --delay=DELAY  Fix the delay of the file.
  
BANNER
  opts.separator ""
  # opts.on("-p", "--path=PATH", String,
  #         "The root path for selecting files",
  #         "Default: ~") { |OPTIONS[:path]| }
          
  opts.on("-c", "--convert=FORMAT", String,
          "Format to convert to") { |OPTIONS[:format]| }
          
  opts.on("-d", "--delay=DELAY", Float,
          "Delay to add/remove") { |OPTIONS[:delay]| }
          
  opts.on("-h", "--help",
          "Show this help message.") { puts opts; exit }          

  opts.on("-v", "--version",
          "Show program version") { OPTIONS[:version] = true }          
          
  opts.parse!(ARGV)

  if MANDATORY_OPTIONS && MANDATORY_OPTIONS.find { |option| OPTIONS[option.to_sym].nil? }
    puts opts; exit
  end
end
    t = Time.now
if OPTIONS[:version]
  include SubtitleIt
  puts a
  exit
end    

if ARGV.empty?
  puts parser.banner
  exit
end

filein, filein_ext = ARGV[0].split('.')
fileout, fileout_ext = ARGV[1] ? ARGV[1].split('.') : [filein, filein_ext]

if File.exists?(ARGV[0])
  content = File.open(ARGV[0], 'r')
  if OPTIONS[:delay]
    ARGV[1] ||= ARGV[0] + "_new"
    SubtitleIt.srt_delay(ARGV[0],ARGV[1])  
  else
    include SubtitleIt
    puts "Working on file #{filein}..."
    sub = Subtitle.new(content, filein_ext) 
    format = OPTIONS[:format]
    format ||= fileout_ext unless fileout_ext == filein_ext
    out = case format
    when 'yml' then sub.to_yml
    when 'sub' then sub.to_sub
    when 'srt' then sub.to_srt
    else
      puts "Dunno what to do with this file!"
      exit
    end
  end 
else
  out = <<GEN
- title: #{ARGV[0]}
- authors: FIXME 
- version: FIXME
00:05:26.500 => 00:05:28.500 == worth killing for...
00:06:00.400 => 00:06:03.400 == worth dying for...
00:07:00.300 => 00:07:03.300 == worth going to the hell for...
GEN
  OPTIONS[:format] = 'rsb'
end

fout = "#{fileout}.#{OPTIONS[:format]}"

if File.exists?(fout) && !File.writable?(fout)
  puts "Can`t write to #{fout}"
else
  File.open(fout, 'w') {|f| f.write(out) }  
  puts "Done. Total time: #{Time.now - t}"
end

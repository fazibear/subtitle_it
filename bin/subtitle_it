#!/usr/bin/env ruby
#
#  Created on 2008-9-4.
#  Copyright (c) 2008. All rights reserved.

begin
  require 'rubygems'
rescue LoadError
  # no rubygems to load, so we fail silently
end

require 'optparse'

require 'subtitle_it'
# NOTE: the option -p/--path= is given as an example, and should probably be replaced in your application.

OPTIONS = {
 # :path     => '~',
  :format   => nil,
  :delay    => nil
}
MANDATORY_OPTIONS = %w(  )

parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
SubtitleIt - Convert and Create subtitles.

Usage: #{File.basename($0)} [options] filein [fileout]

Options are:
  -c FORMAT --convert=FORMAT  Format to convert to
  -d DELAY --delay=DELAY  Fix the delay of the file.
BANNER
  opts.separator ""
  # opts.on("-p", "--path=PATH", String,
  #         "The root path for selecting files",
  #         "Default: ~") { |OPTIONS[:path]| }
          
  opts.on("-c", "--convert=FORMAT", String,
          "Format to convert to") { |OPTIONS[:format]| }
          
  opts.on("-d", "--delay=DELAY", Float,
          "Delay to add/remove") { |OPTIONS[:delay]| }
          
  opts.on("-h", "--help",
          "Show this help message.") { puts opts; exit }
  opts.parse!(ARGV)

  if MANDATORY_OPTIONS && MANDATORY_OPTIONS.find { |option| OPTIONS[option.to_sym].nil? }
    puts opts; exit
  end
end

path = OPTIONS[:path]

if ARGV.empty?
  puts parser.banner
  exit
end


filein, filein_ext = ARGV[0].split('.')
fileout, fileout_ext = ARGV[1] ? ARGV[1].split('.') : [filein, filein_ext]
content = File.open(ARGV[0], 'r')

if OPTIONS[:delay]
  ARGV[1] ||= ARGV[0] + "_new"
  SubtitleIt.srt_delay(ARGV[0],ARGV[1])  
else
  include SubtitleIt
  puts "Working on file #{filein}..."
  t = Time.now
  sub = Subtitle.new(content, filein_ext) 
  format = OPTIONS[:format]
  format ||= fileout_ext unless fileout_ext == filein_ext
  out = case format
  when 'yml' then sub.to_yml
  when 'sub' then sub.to_sub
  when 'srt' then sub.to_srt
  else
    puts "Dunno what to do with this file!"
  end
  
  
    
  File.open("#{fileout}.#{OPTIONS[:format]}", 'w') {|f| f.write(out) }
  
  puts "Done. Total time: #{Time.now - t}"
end 